package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _doc_templates_doc_md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x6d\x6f\xda\x48\x10\xfe\xee\x5f\x31\x72\xaa\x53\xa2\x4b\x16\x48\x9a\xf6\x8a\xd4\x0f\x69\x43\x73\xa9\x52\xe0\x80\xf6\x5e\xaa\x8a\x2c\xf6\x00\xdb\x98\x5d\x77\x77\x4d\xea\x33\xfe\xef\xa7\x59\x1b\x83\x49\x9b\xea\xfa\xa2\xfb\x72\x12\x12\xde\xd9\xd9\x99\xd9\xe7\x99\x97\xdd\xdb\x83\x97\x0a\xe1\xb7\x04\xb5\x40\xe3\x79\xa3\xb9\x30\x10\xaa\x20\x59\xa0\xb4\x30\xe7\x06\x26\x88\x12\x78\x62\xd5\x82\x5b\x11\xf0\x28\x4a\x61\x86\x12\x35\xb7\x18\xc2\xad\xb0\x73\x78\xfb\x5e\x21\x2c\xb3\x8c\xbd\x41\x6d\x84\x92\x79\xfe\x6e\x7f\x6e\x6d\x6c\xda\x8d\xc6\x4c\xd8\x79\x32\x61\x81\x5a\x34\x70\x29\x22\xa3\x82\x1b\xb4\x8d\xf7\x0a\x0f\x98\xe7\xed\xed\xed\xc1\x45\x67\xb4\xea\xf7\x86\x23\x68\xf0\x58\x34\x96\xad\x06\x4f\xec\x1c\xc0\xf3\xce\x12\x3b\x47\x49\x2e\x2d\x82\x55\x60\xe7\x08\x67\xfd\xcb\xc2\x65\x62\x50\x4b\xbe\x40\xe0\x32\x84\x98\x1b\x73\xab\x74\x08\x42\x82\xd2\x21\x6a\x52\x9f\xa1\x05\x0e\x2f\x7f\x1f\x81\x55\x37\x28\x99\xe7\xad\xfa\x5c\xf3\x05\x5a\xd4\xab\x73\x9c\xf2\x24\xb2\x2b\x6f\x75\x74\x44\x3f\x6f\x05\xd7\x64\xf2\x1a\x56\x30\x96\x4a\xe2\x18\x9c\x8c\x2c\xd7\x64\x14\xf2\x1e\x0c\xf0\x43\x82\xc6\x7a\x1e\x00\x40\x90\xe8\x08\x8e\x8e\x42\x6e\x39\xf8\x64\xe4\x29\x0f\x17\x42\xfe\x44\x67\x8b\x4f\x1f\x08\x8d\x76\xa3\x91\x65\xc0\xce\xc2\x50\xa3\x31\x90\xe7\xdb\x17\xae\x0c\x9b\x58\x49\x83\x9e\x77\x7d\x7d\xfd\xde\x28\xe9\x65\x1e\x80\xef\x6e\xe0\xb7\xc1\x67\x8c\xf9\x5e\x4e\x9b\x15\x78\x15\x6e\x1f\x0a\x0a\x1b\x9e\x77\xe1\xae\x1e\x09\x63\x41\x4d\x1d\x6e\xe5\x1e\xd8\x39\xb7\xc0\x35\x52\xd0\x1a\xa5\x8d\x52\x88\x14\x0f\xd1\x41\x47\x8a\x26\x35\x16\x17\x0e\x55\xa7\x4b\x32\xba\x13\x04\x5c\x02\x0f\x02\x34\x86\x7d\x1e\x84\x5f\xc1\x27\xd6\x94\x16\x7f\x73\x2b\x94\x6c\xc3\x33\xe4\x1a\x35\x30\x56\x90\xc0\xbe\x00\xc5\x87\x75\x1a\x7e\x06\x8d\xb7\x1e\x40\xe6\x1c\xfa\x81\x46\xca\xc0\x31\xb7\x04\xcc\x71\xb3\xf5\xe4\xa8\xd5\x3a\x6a\x3e\x19\xb5\x9a\xed\xd3\xc7\xed\x66\x8b\x3d\xfe\xe5\xe1\xc9\x49\xeb\xf8\xf4\xf4\xe7\x66\xab\xdd\x6c\xfa\x87\xc5\xc1\x24\x0e\xbf\x7c\xf0\xe1\x93\x87\xc7\x27\x3b\x07\x29\xdf\xe8\x88\x55\xf1\x38\x8e\x78\x8a\xda\xac\xb7\x02\x1e\xcc\x69\xaf\x88\x8d\x18\x4b\x63\x5a\xb7\x0e\xd7\x82\x1b\x4c\x8d\xdf\x86\xb7\xe5\x1a\xc0\x8f\xc4\x42\x58\xbf\x5c\xbf\xab\x14\xad\x8d\xfc\x36\x9c\x3c\x6a\x36\x9d\x24\x2f\x3d\x84\x68\x02\x2d\x62\x42\x95\x62\x18\xa9\x18\xca\x18\x60\x92\x96\xcc\x40\xac\x84\xb4\x86\xf9\xd5\x19\x97\xe5\x66\x3b\xb0\xc2\x6b\x1b\x8e\x4f\x6b\xe6\x09\xf8\x94\x0c\x0f\x3b\x57\x9d\xe7\x23\x80\x84\x6d\x70\x02\x6e\x80\x07\x56\x2c\x71\xcc\xed\x21\x24\x8c\x90\xa0\xff\xa9\x90\x33\xd4\xb1\x16\xd2\x89\x03\x95\x48\xab\xd3\x43\x78\xde\x7b\xdd\x1d\xed\x73\x26\xc2\x03\x38\x1b\x82\x44\x7b\xab\xf4\x8d\x81\x17\x83\xde\x2b\x48\xa4\xb0\x06\x12\xb8\xec\x76\x3b\x03\x78\xd9\xbb\xec\x96\xe1\x8f\x8b\xf0\x81\x43\xaf\x0b\x09\x13\x21\x3c\x05\xce\x48\x7d\x2c\x42\xb8\x18\xf4\x5e\xf7\xe1\xd9\x9f\xc5\x4e\x6f\x70\xde\x19\xd0\xaa\xb2\x7d\xde\x19\x3e\x87\xab\xcb\x57\x97\x23\xc8\xdc\x25\xf3\x35\x0c\x4b\x81\xb7\x35\x0c\x26\x5c\x9b\x1d\x22\xc7\x24\x63\x33\xe5\xd7\x50\x29\xe2\xda\xa2\xcd\x2f\xea\xd9\xad\xde\x79\xa5\x22\x63\x6c\x5d\x93\x59\x06\x0f\x78\x99\xd5\xed\xa7\xdb\x19\x4e\x7b\x9a\xcb\x19\x02\x2b\x7b\x2d\xc9\x3e\x55\xc3\x69\x23\xcb\x58\x97\x2f\x30\xcf\x1b\x14\x3a\xf5\xc2\xe1\x5c\xdd\x82\x90\x53\xa5\x17\xae\xb0\x80\x4f\x54\x52\x54\x67\xa5\xec\x8a\x3c\xbd\x53\x9d\x59\x26\xa6\xc0\xa8\x2c\x49\x24\x34\x86\x14\xcd\xd7\xd6\x6c\x75\xbb\x7a\xcd\xee\xc6\xec\x65\x19\x46\x06\xb7\x1d\x7d\x95\x0d\x19\x96\x28\x7d\xb2\x35\x66\xf4\x07\x2c\xaf\x37\xc4\xfa\x34\xd9\xb1\xbc\xcf\xe8\xcc\x8a\x05\x66\x79\x40\xd8\xb0\xf3\x4d\x5d\x15\x24\x11\x5a\xd5\xa0\x70\xcc\xdd\x37\x37\xd6\xa4\x3e\x28\x4a\xe2\x41\x88\x53\x47\x7c\xcd\xc2\x0a\xae\xb3\xcc\x69\xe4\x39\x4d\x13\xe7\x84\x54\xf3\x3c\xcb\xd6\xff\x05\x5e\xc5\xa0\x29\x6f\x0e\xab\x0a\x83\x5d\x2c\xfe\x23\x72\x1d\x7a\x59\xe6\x52\x38\x1d\x5a\x2d\xe4\xac\x08\xee\x1b\xc8\x66\x25\x99\xdf\x9f\xec\x06\x7e\x8c\x23\x2e\xa4\xe7\x0d\xd0\x26\x5a\x82\x46\x43\xfd\x10\xa6\x4a\x03\x97\xd0\xf9\xa3\x7f\x75\x76\xd9\x05\x15\xd3\x6b\x86\xca\x4a\xc9\x9d\x9a\x5a\x70\x21\xab\xc2\xfa\x3f\x39\xee\xaf\xda\x12\xee\xef\x9c\x1f\xf7\x99\xbd\x3f\x65\xbc\xf5\x64\x2e\x87\xbd\x4c\xa2\x88\x1a\xb6\x8f\x1f\x31\x18\x5b\xe1\xc6\xf9\xf1\xe3\x47\x27\xc7\x8f\x4e\x9c\x5c\x26\x8b\xb1\xc6\x40\xe9\xd0\xac\x87\xb7\xbf\x59\x17\x43\xa0\x9a\x22\x9d\x8f\x56\x73\x1a\x23\x7f\xa1\x56\x50\xcc\xd5\x6a\x8a\x4f\x45\x64\x51\x63\xb8\xe5\xd5\xc9\x45\xb8\xfb\x2a\xd8\xd5\xb8\xc1\x74\x1c\xb9\xd7\x5e\x4d\x1c\x73\x6d\x05\xb1\x64\xee\xec\x28\x63\xc4\x24\xc2\x71\xf9\xc4\xa8\x6d\x6a\x9c\xde\x11\xa9\xdb\x3b\x6a\x06\x23\x0c\xec\xb8\x7c\xb5\xf8\xc3\xcb\x57\xfd\xab\xce\xe6\x36\x96\x4f\x22\xdc\x3d\x53\x2a\x93\xac\x18\x9a\x1e\xcd\xc4\xa2\x3c\xc1\x4d\x42\x47\x24\x91\xe8\xb2\xde\x7d\x38\xda\xca\x1d\x57\x06\xe6\x6e\x45\x6c\x34\x0a\xaa\x9d\xc6\x16\xf5\x35\x95\x5a\x7a\xbb\x91\xbb\x93\xef\x9b\x2a\xa4\xa1\xd2\x2d\x2a\x91\x3e\x5f\x88\xa8\x08\xec\x0d\xbd\x0f\x48\xf5\x73\xd3\x78\x73\x91\x3c\xa7\xe5\xda\x50\x9e\xb3\xfd\x58\xce\x56\x66\x39\x3b\xa8\x7a\x0c\x87\x7e\xf7\x02\x94\x86\xe1\x9b\x0b\xd0\x18\x6b\x34\x28\x6d\xd9\x5e\xa6\xc0\xa1\x66\x00\x82\x39\xd7\xd6\x35\xa4\xa2\xf1\x6c\xfb\xaa\x37\x9e\x1a\x68\x5f\xd7\x79\x76\x4c\xfc\xe0\xd6\xf3\x09\x82\x7e\x4c\xff\xb9\x87\x9f\x58\xce\xd6\xfb\xdf\xda\x8e\xfe\xbd\x97\x02\x99\xdd\x8f\x7f\x02\x00\x00\xff\xff\x5a\x17\xc7\x6f\x72\x0f\x00\x00")

func doc_templates_doc_md() ([]byte, error) {
	return bindata_read(
		_doc_templates_doc_md,
		"doc/templates/doc.md",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"doc/templates/doc.md": doc_templates_doc_md,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"doc": &_bintree_t{nil, map[string]*_bintree_t{
		"templates": &_bintree_t{nil, map[string]*_bintree_t{
			"doc.md": &_bintree_t{doc_templates_doc_md, map[string]*_bintree_t{
			}},
		}},
	}},
}}
