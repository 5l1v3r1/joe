package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _doc_templates_doc_md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x6d\x6f\xdb\x38\x0c\xfe\xee\x5f\x41\xb8\xc3\xa1\xc5\xb5\x4a\xd2\xae\xdb\x2d\xc0\x3e\x74\x6b\xd6\xeb\xd0\x25\xb9\x24\xdb\xbd\x0c\x43\xaa\xd8\x4c\xa2\xd5\x91\x3c\x49\x4e\xe7\x73\xfc\xdf\x0f\x94\x1d\x27\x4e\xb7\x0e\xb7\x17\xdc\x97\x03\x02\xc4\xa2\x28\x8a\x7c\xc8\x87\xd4\xde\x1e\xbc\x54\x08\xbf\x25\xa8\x05\x1a\xcf\x1b\xcd\x85\x81\x50\x05\xc9\x02\xa5\x85\x39\x37\x30\x41\x94\xc0\x13\xab\x16\xdc\x8a\x80\x47\x51\x0a\x33\x94\xa8\xb9\xc5\x10\x6e\x85\x9d\xc3\xdb\xf7\x0a\x61\x99\x65\xec\x0d\x6a\x23\x94\xcc\xf3\x77\xfb\x73\x6b\x63\xd3\x6e\x34\x66\xc2\xce\x93\x09\x0b\xd4\xa2\x81\x4b\x11\x19\x15\xdc\xa0\x6d\xbc\x57\x78\xc0\x3c\x6f\x6f\x6f\x0f\x2e\x3a\xa3\x55\xbf\x37\x1c\x41\x83\xc7\xa2\xb1\x6c\x35\x78\x62\xe7\x00\x9e\x77\x96\xd8\x39\x4a\xba\xd2\x22\x58\x05\x76\x8e\x70\xd6\xbf\x2c\xae\x4c\x0c\x6a\xc9\x17\x08\x5c\x86\x10\x73\x63\x6e\x95\x0e\x41\x48\x50\x3a\x44\x4d\xea\x33\xb4\xc0\xe1\xe5\xef\x23\xb0\xea\x06\x25\xf3\xbc\x55\x9f\x6b\xbe\x40\x8b\x7a\x75\x8e\x53\x9e\x44\x76\xe5\xad\x8e\x8e\xe8\xe7\xad\xe0\x9a\x4c\x5e\xc3\x0a\xc6\x52\x49\x1c\x83\x93\x91\xe5\x9a\x8c\x5c\xde\x83\x01\x7e\x48\xd0\x58\xcf\x03\x00\x08\x12\x1d\xc1\xd1\x51\xc8\x2d\x07\x9f\x8c\x3c\xe5\xe1\x42\xc8\x9f\xe8\x6c\xf1\xe9\x03\xa1\xd1\x6e\x34\xb2\x0c\xd8\x59\x18\x6a\x34\x06\xf2\x7c\x3b\xe0\xca\xb0\x89\x95\x34\xe8\x79\xd7\xd7\xd7\xef\x8d\x92\x5e\xe6\x01\xf8\x2e\x02\xbf\x0d\x3e\x63\xcc\xf7\x72\xda\xac\xc0\xab\x70\xfb\x50\xa4\xb0\xe1\x79\x17\x2e\xf4\x48\x18\x0b\x6a\xea\x70\x2b\xf7\xc0\xce\xb9\x05\xae\x91\x9c\xd6\x28\x6d\x94\x42\xa4\x78\x88\x0e\x3a\x52\x34\xa9\xb1\xb8\x60\x9f\x8f\xf3\x57\xf0\x29\x31\x4a\x8b\xbf\xb9\x15\x4a\xb6\xe1\x19\x72\x8d\x1a\x18\x2b\x70\x66\x5f\x88\xf6\xc3\xba\xd2\x3e\x13\xf0\x5b\x0f\x20\x73\x17\xfa\x81\x46\x2a\xb2\x31\xb7\x14\xfb\x71\xb3\xf5\xe4\xa8\xd5\x3a\x6a\x3e\x19\xb5\x9a\xed\xd3\xc7\xed\x66\x8b\x3d\xfe\xe5\xe1\xc9\x49\xeb\xf8\xf4\xf4\xe7\x66\xab\xdd\x6c\xfa\x87\xc5\xc1\x24\x0e\xbf\x7c\xf0\xe1\x93\x87\xc7\x27\x3b\x07\xa9\xa4\xe8\x88\x55\xf1\x38\x8e\x78\x8a\xda\xac\xb7\x02\x1e\xcc\x69\xaf\xf0\x8d\x92\x92\xc6\xb4\x6e\x1d\xae\x05\x37\x98\x1a\xbf\x0d\x6f\xcb\x35\x80\x1f\x89\x85\xb0\x7e\xb9\x7e\x57\x29\x5a\x1b\xf9\x6d\x38\x79\xd4\x6c\x3a\x49\x5e\xde\x10\xa2\x09\xb4\x88\x09\x55\xf2\x61\xa4\x62\x28\x7d\x80\x49\x0a\x3c\x08\x08\xc8\x58\x09\x69\x0d\xf3\xab\x33\xae\x90\xcd\xb6\x63\xc5\xad\x6d\x38\x3e\xad\x99\x27\xe0\x53\x32\x3c\xec\x5c\x75\x9e\x8f\x00\x12\xb6\xc1\x09\xb8\x01\x1e\x58\xb1\xc4\x31\xb7\x87\x90\x30\x42\x82\xfe\xa7\x42\xce\x50\xc7\x5a\x48\x27\x0e\x54\x22\xad\x4e\x0f\xe1\x79\xef\x75\x77\xb4\xcf\x99\x08\x0f\xe0\x6c\x08\x12\xed\xad\xd2\x37\x06\x5e\x0c\x7a\xaf\x20\x91\xc2\x1a\x48\xe0\xb2\xdb\xed\x0c\xe0\x65\xef\xb2\x5b\xba\x3f\x2e\xdc\x07\x0e\xbd\x2e\x24\x4c\x84\xf0\x14\x38\x23\xf5\xb1\x08\xe1\x62\xd0\x7b\xdd\x87\x67\x7f\x16\x3b\xbd\xc1\x79\x67\x40\xab\xca\xf6\x79\x67\xf8\x1c\xae\x2e\x5f\x5d\x8e\x20\x73\x41\xe6\x6b\x18\x96\x02\x6f\x6b\x18\x4c\xb8\x36\x3b\x89\x1c\x93\x8c\xcd\x94\x5f\x43\xa5\xf0\x6b\x2b\x6d\x7e\x41\x59\xb7\x7a\xe7\x95\x8a\x8c\xb1\x35\xed\xb2\x0c\x1e\xf0\xb2\xaa\xdb\x4f\xb7\x2b\x9c\xf6\x34\x97\x33\x04\x56\xb6\x53\x92\x7d\x8a\xa6\x69\x23\xcb\x58\x97\x2f\x30\xcf\x1b\xe4\x3a\xb5\xbb\xe1\x5c\xdd\x82\x90\x53\xa5\x17\x8e\x58\xc0\x27\x2a\xb1\x8e\x94\x95\xb2\xe3\x71\x7a\x87\x9d\x59\x26\xa6\xc0\x88\x96\x24\x12\x1a\x43\xf2\xe6\x6b\x39\x5b\x45\x57\xe7\xec\xae\xcf\x5e\x96\x61\x64\x70\xfb\xa2\xaf\xb2\x21\xc3\x12\xa5\x4f\x76\xbf\x8c\xfe\x80\xe5\xf5\x9e\x57\x1f\x18\x3b\x96\xf7\x19\x9d\x59\xb1\xc0\x2c\x0f\x08\x1b\x76\xbe\xe1\x55\x91\x24\x42\xab\x9a\x05\x2e\x73\xf7\x8d\x86\x75\x52\x1f\x14\x94\x78\x10\xe2\xd4\x25\xbe\x66\x61\x05\xd7\x59\xe6\x34\xf2\x9c\x06\x86\xbb\x84\x54\xf3\x3c\xcb\xd6\xff\x05\x5e\xc5\x2c\x29\x23\x87\x55\x85\xc1\x2e\x16\xff\x51\x72\x1d\x7a\x59\xe6\x4a\x38\x1d\x5a\x2d\xe4\xac\x70\xee\x1b\x92\xcd\xca\x64\x7e\xff\x64\x37\xf0\x63\x1c\x71\x21\x3d\x6f\x80\x36\xd1\x12\x34\x1a\xea\x87\x30\x55\x1a\xb8\x84\xce\x1f\xfd\xab\xb3\xcb\x2e\xa8\x98\x1e\x2c\x44\x2b\x25\x77\x38\xb5\xe0\x42\x56\xc4\xfa\xbf\x38\xee\x67\x6d\x09\xf7\x77\xae\x8f\xfb\xcc\xde\x5f\x32\xde\x7a\x32\x97\xc3\x5e\x26\x51\x44\x0d\xdb\xc7\x8f\x18\x8c\xad\x70\xe3\xfc\xf8\xf1\xa3\x93\xe3\x47\x27\x4e\x2e\x93\xc5\x58\x63\xa0\x74\x68\xd6\xc3\xdb\xdf\xac\x8b\x21\x50\x4d\x91\xce\x47\xab\x39\x8d\x91\xbf\x50\x2b\x28\xe6\x6a\x35\xc5\xa7\x22\xb2\xa8\x31\xdc\xba\xd5\xc9\x45\xb8\xfb\x2a\xd8\xd5\xb8\xc1\x74\x1c\xb9\x07\x5d\x4d\x1c\x73\x6d\x05\x65\xc9\xdc\xd9\x51\xc6\x88\x49\x84\xe3\xf2\x89\x51\xdb\xd4\x38\xbd\x23\x52\xb7\x77\xd4\x0c\x46\x18\xd8\x71\xf9\x6a\xf1\x87\x97\xaf\xfa\x57\x9d\x4d\x34\x96\x4f\x22\xdc\x3d\x53\x2a\x93\xac\x18\x9a\x1e\xcd\xc4\x82\x9e\xe0\x26\xa1\x4b\x24\x25\xd1\x55\xbd\xfb\x70\x69\x2b\x77\x1c\x0d\xcc\x5d\x46\x6c\x34\x8a\x54\x3b\x8d\xad\xd4\xd7\x54\x6a\xe5\xed\x46\xee\x4e\xbd\x6f\x58\x48\x43\xa5\x5b\x30\x91\x3e\x5f\x88\xa8\x70\xec\x0d\xbd\x0f\x48\xf5\x73\xd3\x78\x13\x48\x9e\xd3\x72\x6d\x28\xcf\xd9\x7e\x2c\x67\x2b\xb3\x9c\x1d\x54\x3d\x86\x43\xbf\x7b\x01\x4a\xc3\xf0\xcd\x05\x68\x8c\x35\x1a\x94\xb6\x6c\x2f\x53\xe0\x50\x33\x00\xc1\x9c\x6b\xeb\x1a\x52\xd1\x78\xb6\xef\xaa\x37\x9e\x1a\x68\x5f\xd7\x79\x76\x4c\xfc\xe0\xd6\xf3\x89\x04\xfd\x98\xfe\x73\x4f\x7e\x62\x39\x5b\xef\x7f\x6b\x3b\xfa\xf7\xb7\x14\xc8\xec\x7e\xfc\x13\x00\x00\xff\xff\x4a\xca\x29\x7e\x55\x0f\x00\x00")

func doc_templates_doc_md() ([]byte, error) {
	return bindata_read(
		_doc_templates_doc_md,
		"doc/templates/doc.md",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"doc/templates/doc.md": doc_templates_doc_md,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"doc": &_bintree_t{nil, map[string]*_bintree_t{
		"templates": &_bintree_t{nil, map[string]*_bintree_t{
			"doc.md": &_bintree_t{doc_templates_doc_md, map[string]*_bintree_t{
			}},
		}},
	}},
}}
